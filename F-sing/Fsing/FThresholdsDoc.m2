doc ///
     Key
     	 estFPT
     Headline
         Atempts to compute the F-pure threshold, where e is the max depth to search in.  
     Usage
     	  estFPT(f,e,finalCheck=>V,Verbose=>W)
     Inputs
     	 f:RingElement
         e:ZZ
	 V:Boolean
	 W:Boolean
     Outputs
        L:List
	Q:QQ
     Description
     	  Text 
	      This tries to find an exact value for the fpt.  If it can, it returns that value.  Otherwise it should return a range of possible values (eventually).  It first checks to see if the ring is binonmial or diagonal.  In either case it uses methods of D. Hernandez.  Next it tries to estimate the range of the FPT using nu's.  Finally, it tries to use this to deduce the actual FPT via taking advantage of convexity of the F-signature function and a secant line argument.  finalCheck is a Boolean with default value True that determines whether the last isFRegularPoly is run (it is possibly very slow).  If FinalCheck is false, then a last time consuming check won't be tried.  If it is true, it will be.  Verbose set to true displays verbose output.
///

doc ///
     Key
     	 FPTApproxList
	 (FPTApproxList,ZZ,Ideal)
	 (FPTApproxList,ZZ,RingElement)
     Headline
        Gives a list of nu_I(p^d)/p^d for d=1,...,e.
     Usage
     	  FPTApproxList(e,I)
	  FPTApproxList(e,f) 
     Inputs
         e:ZZ
     	 I:Ideal
	 f:RingElement
     Outputs
         :List
     Description
	Text 
 	     This returns a list of nu_I(p^d)/p^d for d = 1, ..., e.  The {nu_I(p^d)/p^d} converge to the F-pure threshold.	     
///

doc ///
     Key
     	 FTApproxList
	 (FTApproxList,ZZ,Ideal,Ideal)
	 (FTApproxList,ZZ,RingElement,Ideal)
     Headline
        Gives a list of nu_I^J(p^d)/p^d for d=1,...,e.
     Usage
     	  FTApproxList(e,I,J)
	  FTApproxList(e,f,J) 
     Inputs
         e:ZZ
     	 I:Ideal
	 J:Ideal
	 f:RingElement
     Outputs
         :List
     Description
	Text 
 	     This returns a list of nu_I^J(p^d)/p^d for d = 1, ..., e.  The {nu_I^J(p^d)/p^d} converge to the F-threshold.	     
///

doc ///
     Key
     	 FTHatApproxList
	 (FTHatApproxList,ZZ,Ideal,Ideal)
	 (FTHatApproxList,ZZ,RingElement,Ideal)
     Headline
        Gives a list of nuHat_I^J(p^d)/p^d for d=1,...,e.
     Usage
     	  FTHatApproxList(e,I,J)
	  FTHatApproxList(e,f,J) 
     Inputs
         e:ZZ
     	 I:Ideal
	 J:Ideal
	 f:RingElement
     Outputs
         :List
     Description
	Text 
 	     This returns a list of nuHat_I^J(p^d)/p^d for d = 1, ..., e.  The {nuHat_I^J(p^d)/p^d} converge to the FHat-threshold.	     
///

doc ///
     Key
     	guessFPT 
     Headline
        Tries to guess the FPT in a really naive way (this should be improved).
     Usage
     	 guessFPT(f,e,d) 
     Inputs
     	 f:RingElement
         e:ZZ
	 d:ZZ
     Outputs
        :List
     Description
	Text
	     This tries to guess the FPT.  In particular, it computes the number nu such that nu/(p^e - 1) <= FPT < (nu+1)/p^e.  It then outputs a list of all rational numbers with denominators less than or equal to d, which lie in that range.  WARNING:  There are several improvements which should be made to this function to rule out many of the possibilies.
///

doc ///
     Key
     	isFJumpingNumberPoly 
     	(isFJumpingNumberPoly,QQ,RingElement)
     Headline
        Checks whether a given number is an F-jumping number
     Usage
     	 isFJumpingNumberPoly(t,f,Verbose=>V)  
     Inputs
         t:QQ
         f:RingElement
	 V:Boolean
     Outputs
        :Boolean
     Description
     	Text
	     Returns true if t is an F-jumping number, otherwise it returns false.
///

doc ///
     Key
     	isFPTPoly 
   	(isFPTPoly,QQ,RingElement)
     Headline
        Checks whether a given number is the FPT
     Usage
     	  isFPTPoly(t,f,Verbose=>V,Origin=>W)  
     Inputs
 	 	t:QQ
        	f:RingElement
		V:Boolean
		W:Boolean
     Outputs
        :Boolean
     Description
     	Text
	     Returns true if t is the FPT, otherwise it returns false.  If Origin is true, it only checks it at the homogeneous maximal ideal.
///
 
doc ///
     Key
     	 nu
	 (nu,ZZ,Ideal,Ideal)
	 (nu,ZZ,Ideal)
	 (nu,ZZ,RingElement,Ideal)
	 (nu,ZZ,RingElement)
     Headline
        Gives $\(nu_I)^J(p^e)$ or $\(nu_f)^J(p^e)$
     Usage
     	  nu(e,I,J)
	  nu(e,I)
	  nu(e,f,J)
	  nu(e,f) 
     Inputs
         e:ZZ
     	 I:Ideal
	 J:Ideal
	 f:RingElement
     Outputs
        :ZZ
     Description
	Text
	    Given an ideal I in a polynomial ring k[x1, ..., xn], this function outputs the maximal integer nu such that I^nu is not in ideal J^[p^e].  If the input is (ZZ,Ideal) then the function computes the maximal integer nu such that I^nu in not in (x_1, ...,x_n)^[p^e]. If a RingElement is passed, it computes nu of the principal ideal generated by this element. This is used frequently to compute the F-pure threshold.
///

doc ///
     Key
     	 nuList
	 (nuList,ZZ,Ideal,Ideal)
	 (nuList,ZZ,Ideal)
	 (nuList,ZZ,RingElement,Ideal)
	 (nuList,ZZ,RingElement)
     Headline
        Lists $\(nu_I)^J(p^d)$ for d = 1,...,e.
     Usage
     	  nuList(e,I,J)
	  nuList(e,I)
	  nuList(e,f,J)
	  nuList(e,f) 
     Inputs
         e:ZZ
     	 I:Ideal
	 J:Ideal
	 f:RingElement
     Outputs
        :List
     Description
	Text
	     Given an ideal I in a polynomial ring k[x1,...,xn], this function computes nu(d,I) for d = 1,...,e. If a RingElement is passed, it computes nu of the principal ideal generated by this element for d=1,...,e.
///

doc ///
     Key
     	 nuHat
	 (nuHat,ZZ,Ideal,Ideal)
	 (nuHat,ZZ,Ideal)
	 (nuHat,ZZ,RingElement,Ideal)
	 (nuHat,ZZ,RingElement)
     Headline
        Gives $\hat(nu_I)^J(p^e)$ or $\hat(nu_f)^J(p^e)$
     Usage
     	  nuHat(e,I,J)
	  nuHat(e,I)
	  nuHat(e,f,J)
	  nuHat(e,f) 
     Inputs
         e:ZZ
     	 I:Ideal
	 J:Ideal
	 f:RingElement
     Outputs
        :ZZ
     Description
	Text
	    Given an ideal I in a polynomial ring k[x1, ..., xn], this function outputs the maximal integer nu such that I^[nu] is not in ideal J^[p^e].  If the input is (ZZ,Ideal) then the function computes the maximal integer nu such that I^[nu] in not in (x_1, ...,x_n)^[p^e]. If a RingElement is passed, it computes nuHat of the principal ideal generated by this element. This is used frequently to compute the generalized F-pure threshold.
///

doc ///
     Key
     	 nuHatList
	 (nuHatList,ZZ,Ideal,Ideal)
	 (nuHatList,ZZ,Ideal)
	 (nuHatList,ZZ,RingElement,Ideal)
	 (nuHatList,ZZ,RingElement)
     Headline
        Lists $\hat(nu_I)^J(p^d)$ for d = 1,...,e.
     Usage
     	  nuHatList(e,I,J)
	  nuHatList(e,I)
	  nuHatList(e,f,J)
	  nuHatList(e,f) 
     Inputs
         e:ZZ
     	 I:Ideal
	 J:Ideal
	 f:RingElement
     Outputs
        :List
     Description
	Text
	     Given an ideal I in a polynomial ring k[x1,...,xn], this function computes nuHat(d,I) for d = 1,...,e. If a RingElement is passed, it computes nuHat of the principal ideal generated by this element for d=1,...,e.
///

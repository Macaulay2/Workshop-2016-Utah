--computes the parameter test submodule of a given ring.  It outputs the parameter test module (as an ideal), it then outputs the canonical module (as an ideal), and finally it outputs the term u used as the action on the ideal
paraTestModuleAmbient = method();

paraTestModuleAmbient (Ring) := (R1) -> (
	S1 := ambient R1;
	I1 := ideal(R1);
	
	canIdeal := sub(canonicalIdeal(R1), S1) + I1;
	
	J1 := (findTestElementAmbient(R1));
	tau0 := J1*canIdeal; --this is the starting test element times the ideal
	
	u1 := finduOfIdeal(I1, canIdeal); --this is the multiplying object that gives us (u*omega)^{[1/p]} \subseteq omega.
	
	tauOut := ascendIdeal(1, u1, tau0);
	
	(sub(tauOut, R1), sub(canIdeal, R1), 
	u1)
)

paraTestModuleAmbient (Ring, Ideal) := (R1, canIdeal) -> (--it expects the canonical ideal to be lifted to the ambient ring
	S1 := ambient R1;
	I1 := ideal(R1);
	
	J1 := findTestElementAmbient(R1);
	tau0 := J1*canIdeal; --this is the starting test element times the ideal
	
	u1 := finduOfIdeal(I1, canIdeal); --this is the multiplying object that gives us (u*omega)^{[1/p]} \subseteq omega.
	
	tauOut := ascendIdeal(1, u1, tau0);
	
	(sub(tauOut, R1), sub(canIdeal, R1), u1)
)

--computes the parameter test ideal of an ambient ring
paraTestIdealAmbient = (R1) -> (
	tempList := paraTestModuleAmbient(R1);
	(tempList#0) : (tempList#1)
)
paraTestModule = method(Options=>{AscentCount=>false})
--this computes the parameter test module \tau(R, f^t).  It does not assume that R is a polynomial ring.
paraTestModule(QQ, RingElement) := o -> (t1, fk) -> ( --maintained by Karl
	R1 := ring fk;
	S1 := ambient R1;
	f1 := sub(fk, S1);
	I1 := ideal R1;
	pp := char R1;
	funList := divideFraction(pp, t1);
	
	aa := funList#0;
	bb := funList#1;
	cc := funList#2;
	
--	tempList := paraTestModuleAmbient(R1);
--	tauAmb := sub(tempList#0, S1);
--	omegaAmb := sub(tempList#1, S1);
--	u1 := tempList#2;

	omegaAmb := sub(canonicalIdeal(R1), S1) + I1;
	J1 := findTestElementAmbient(R1)*omegaAmb;
	u1 := finduOfIdeal(I1, omegaAmb);

	uPower := 1;
	if (cc != 0) then
		uPower = floor((pp^cc-1)/(pp-1));
	firstTau := J1;
	local tempList;
	ascendingCount := 0;
--	assert false;
	if (cc != 0) then	
--??? REORDER PARAMETERS
		if (o.AscentCount == false) then (firstTau = ascendIdeal( cc, {aa, uPower}, {f1, u1}, J1*ideal(f1^(pp^bb*ceiling(t1))) ))
		else (tempList = ascendIdeal(  cc, (aa, uPower), (f1, u1), J1*ideal(f1^(pp^bb*ceiling(t1))), AscentCount=>true);
			firstTau = tempList#0;
			ascendingCount = tempList#1;
		)
--		firstTau = ascendIdeal(cc, f1^aa*u1^(uPower), J1*ideal(f1^(aa)))

	else 
--		firstTau = ascendIdeal(1, u1^(uPower), J1)*ideal(f1^aa);
		firstTau = ascendIdeal( 1, uPower, u1, J1);
--    error "Debug me";			
	secondTau := firstTau;
	if (bb != 0) then
		secondTau = ethRootRingElements(bb, {floor((pp^bb-1)/(pp-1)), aa}, {u1, f1}, firstTau); --??? REORDER PARAMETERS

	if (o.AscentCount == false) then (sub(secondTau, R1), omegaAmb, u1) else (sub(secondTau, R1), omegaAmb, u1, ascendingCount)
)

--this computes the parameter test module \tau(R, f^t).  It does not assume that R is a polynomial ring.
paraTestModule(QQ, RingElement, Ideal, RingElement) := o -> (t1, fk, omegaAmb, u1) -> ( --maintained by Karl
	R1 := ring fk;
	S1 := ambient R1;
	f1 := sub(fk, S1);
	I1 := ideal R1;
	pp := char R1;
	funList := divideFraction(pp, t1);
	
	aa := funList#0;
	bb := funList#1;
	cc := funList#2;
	
--	tempList := paraTestModuleAmbient(R1);
--	tauAmb := sub(tempList#0, S1);
--	omegaAmb := sub(tempList#1, S1);
--	u1 := tempList#2;

	J1 := findTestElementAmbient(R1)*omegaAmb;

	uPower := 1;
	if (cc != 0) then
		uPower = floor((pp^cc-1)/(pp-1));
	firstTau := J1;
	local tempList;
	ascendingCount := 0;
--	assert false;
	if (cc != 0) then	
--??? REORDER PARAMETERS
		if (o.AscentCount == false) then (firstTau = ascendIdeal(cc, {aa, uPower}, (f1, u1), J1*ideal(f1^(pp^bb*ceiling(t1))) ))
		else (tempList = ascendIdeal(  cc, {aa, uPower}, {f1, u1}, J1*ideal(f1^(pp^bb*ceiling(t1))), AscentCount=>true);
			firstTau = tempList#0;
			ascendingCount = tempList#1;
		)
--		firstTau = ascendIdeal(cc, f1^aa*u1^(uPower), J1*ideal(f1^(aa)))

	else 
--		firstTau = ascendIdeal(1, u1^(uPower), J1)*ideal(f1^aa);
		firstTau = ascendIdeal( 1, {uPower},  {u1}, J1);
			
	secondTau := firstTau;
	if (bb != 0) then
		secondTau = ethRootRingElements(bb, {floor((pp^bb-1)/(pp-1)), aa}, {u1, f1}, firstTau); --??? REORDER PARAMETERS

	if (o.AscentCount == false) then (sub(secondTau, R1), omegaAmb, u1) else (sub(secondTau, R1), omegaAmb, u1, ascendingCount)
)



